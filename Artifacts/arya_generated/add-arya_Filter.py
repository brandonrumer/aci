#!/usr/bin/env python
'''
Autogenerated code using arya.py
Original Object Document Input: 
{"vzFilter":{"attributes":{"dn":"uni/tn-common/flt-cmd","name":"cmd","rn":"flt-cmd","status":"created,modified"},"children":[{"vzEntry":{"attributes":{"dn":"uni/tn-common/flt-cmd/e-514-tcp","name":"514-tcp","etherT":"ip","prot":"tcp","dFromPort":"514","dToPort":"514","rn":"e-514-tcp","status":"created,modified"},"children":[]}}]}}
'''
raise RuntimeError('Please review the auto generated code before ' +
                    'executing the output. Some placeholders will ' +
                    'need to be changed')

# list of packages that should be imported for this code to work
import cobra.mit.access
import cobra.mit.naming
import cobra.mit.request
import cobra.mit.session
import cobra.model.vz
from cobra.internal.codec.xmlcodec import toXMLStr

# log into an APIC and create a directory object
ls = cobra.mit.session.LoginSession('https://sandboxapicdc.cisco.com', 'admin', 'ciscopsdt')
md = cobra.mit.access.MoDirectory(ls)
md.login()

# the top level object on which operations will be made
# Confirm the dn below is for your top dn
topDn = cobra.mit.naming.Dn.fromString('uni/tn-common/flt-cmd')
topParentDn = topDn.getParent()
topMo = md.lookupByDn(topParentDn)

# build the request using cobra syntax
vzFilter = cobra.model.vz.Filter(topMo, name='cmd')
vzEntry = cobra.model.vz.Entry(vzFilter, name='514-tcp', etherT='ip', prot='tcp', dFromPort='514', dToPort='514')


# commit the generated code to APIC
print(toXMLStr(topMo))
c = cobra.mit.request.ConfigRequest()
c.addMo(topMo)
md.commit(c)

